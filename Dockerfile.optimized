# Multi-stage build for optimized production image
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libxml2-dev \
    libxslt-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim as production

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libxml2 \
    libxslt1.1 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Set environment variables for performance
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_APP=src/web_interface/web_interface.py \
    FLASK_ENV=production \
    WERKZEUG_RUN_MAIN=true \
    PYTHONHASHSEED=random \
    PYTHONOPTIMIZE=1

# Create non-root user
RUN useradd --create-home --shell /bin/bash crawler

# Copy application code
COPY --chown=crawler:crawler . .

# Create necessary directories
RUN mkdir -p data crawl_results logs && \
    chown -R crawler:crawler /app

# Switch to non-root user
USER crawler

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || exit 1

# Default command - use stable config to prevent Werkzeug conflicts
CMD ["gunicorn", "-c", "gunicorn.stable.conf.py", "wsgi:application"]
