name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Test Python Worker
        run: |
          echo "Testing Python worker compilation..."
          python -m py_compile src/cloudflare_worker.py
          echo "Python worker compiles successfully!"
          
          echo "Testing Python imports..."
          python -c "import requests, bs4, lxml; print('All required packages imported successfully')"
          
          echo "Testing wrangler configuration..."
          if [ -f "wrangler.toml" ]; then
            echo "‚úÖ wrangler.toml found"
            echo "üìÅ Main entry point: $(grep '^main =' wrangler.toml | cut -d'=' -f2 | tr -d ' ')"
            echo "üêç Python Workers enabled: $(grep 'python_workers' wrangler.toml | wc -l)"
          else
            echo "‚ùå wrangler.toml not found"
            exit 1
          fi
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Wrangler
        run: npm install -g wrangler
        
      - name: Authenticate with Cloudflare
        run: |
          # Create wrangler config directory structure
          mkdir -p ~/.wrangler/config
          
          # Create wrangler config file with API token
          cat > ~/.wrangler/config/default.toml << EOF
          api_token = "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          EOF
          
          # Verify the file was created
          echo "Wrangler config created:"
          ls -la ~/.wrangler/
          ls -la ~/.wrangler/config/
          echo "Config file contents (token hidden):"
          cat ~/.wrangler/config/default.toml | sed 's/api_token = ".*"/api_token = "***HIDDEN***"/'
          
          # Test authentication
          echo "Testing authentication..."
          export CLOUDFLARE_API_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"
          if wrangler whoami > /dev/null 2>&1; then
            echo "‚úÖ Authentication successful!"
          else
            echo "‚ö†Ô∏è  Authentication failed, but continuing..."
          fi
          
      - name: Verify Wrangler Setup
        run: |
          echo "Wrangler version:"
          wrangler --version
          
          echo "Wrangler configuration:"
          ls -la ~/.wrangler/
          
          echo "Current working directory:"
          pwd
          
          echo "Project structure:"
          ls -la
          
          echo "Wrangler configuration file:"
          cat wrangler.toml
          
          echo "Checking API token availability..."
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "‚úÖ API token is available (length: ${#CLOUDFLARE_API_TOKEN})"
          else
            echo "‚ùå API token is not available"
            exit 1
          fi
          
          echo "Checking if worker exists..."
          if wrangler whoami > /dev/null 2>&1; then
            echo "Successfully authenticated with Cloudflare"
          else
            echo "Authentication failed, but continuing with deployment..."
          fi
          
          echo "Checking Python worker file..."
          if [ -f "src/cloudflare_worker.py" ]; then
            echo "‚úÖ Python worker file found"
            echo "üìä File size: $(wc -c < src/cloudflare_worker.py) bytes"
          else
            echo "‚ùå Python worker file not found"
            exit 1
          fi
          
      - name: Deploy to Cloudflare Workers
        run: |
          # Set Cloudflare API token as environment variable
          export CLOUDFLARE_API_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"
          
          # Also set it in the current shell
          CLOUDFLARE_API_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"
          
          # Determine environment
          if [ "${{ github.ref_name }}" = "main" ]; then
            ENV="production"
          else
            ENV="staging"
          fi
          
          echo "Deploying to environment: $ENV"
          echo "Using branch: ${{ github.ref_name }}"
          echo "API token set: ${CLOUDFLARE_API_TOKEN:0:8}..."
          
          # Verify authentication before deployment
          echo "Verifying authentication..."
          if wrangler whoami > /dev/null 2>&1; then
            echo "‚úÖ Authentication verified, proceeding with deployment..."
          else
            echo "‚ö†Ô∏è  Authentication failed, but attempting deployment anyway..."
          fi
          
          # Check if worker exists and deploy
          echo "Attempting deployment..."
          if wrangler deploy --env $ENV; then
            echo "Deployment completed successfully!"
          else
            echo "Deployment failed, checking error..."
            echo "Attempting to create worker with --force flag..."
            # If deployment fails, try to create the worker first
            if wrangler deploy --env $ENV --force; then
              echo "Worker created and deployed successfully!"
            else
              echo "Failed to create worker, exiting with error"
              exit 1
            fi
          fi
          
      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 10
          
          echo "Checking worker status..."
          if wrangler whoami; then
            echo "Worker authentication successful!"
          else
            echo "Worker authentication failed, but deployment may still be successful"
          fi
          
          echo "Checking deployment status..."
          echo "Worker should be available at:"
          echo "  - Staging: https://alopecosa-crawler-staging.tchoff.workers.dev"
          echo "  - Production: https://alopecosa-crawler-prod.tchoff.workers.dev"
          
          echo "Deployment verification completed!"
          
      - name: Deploy to specific environment (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Set Cloudflare API token as environment variable
          export CLOUDFLARE_API_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"
          
          # Also set it in the current shell
          CLOUDFLARE_API_TOKEN="${{ secrets.CLOUDFLARE_API_TOKEN }}"
          
          echo "Deploying to environment: ${{ github.event.inputs.environment }}"
          echo "API token set: ${CLOUDFLARE_API_TOKEN:0:8}..."
          
          # Verify authentication before deployment
          echo "Verifying authentication..."
          if wrangler whoami > /dev/null 2>&1; then
            echo "‚úÖ Authentication verified, proceeding with deployment..."
          else
            echo "‚ö†Ô∏è  Authentication failed, but attempting deployment anyway..."
          fi
          
          # Check if worker exists and deploy
          echo "Attempting manual deployment..."
          if wrangler deploy --env ${{ github.event.inputs.environment }}; then
            echo "Manual deployment completed successfully!"
          else
            echo "Manual deployment failed, checking error..."
            echo "Attempting to create worker with --force flag..."
            # If deployment fails, try to create the worker first
            if wrangler deploy --env ${{ github.event.inputs.environment }} --force; then
              echo "Worker created and deployed successfully!"
            else
              echo "Failed to create worker, exiting with error"
              exit 1
            fi
          fi
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Your worker is now live!"
            echo "üìä Check Cloudflare dashboard for details"
            echo "üîó Worker URLs:"
            echo "   - Staging: https://alopecosa-crawler-staging.tchoff.workers.dev"
            echo "   - Production: https://alopecosa-crawler-prod.tchoff.workers.dev"
          else
            echo "‚ùå Deployment failed!"
            echo "üîç Check the logs above for error details"
            echo "üí° Common issues:"
            echo "   - Invalid API token"
            echo "   - Worker already exists"
            echo "   - Python compilation errors"
            echo "üõ†Ô∏è  Try running locally first:"
            echo "   - wrangler dev --local"
            echo "   - wrangler deploy --env staging"
          fi
