# Python-friendly workflow for building and testing Python projects
name: Python Build and Test

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "staging"]
  
  # Runs on pull requests
  pull_request:
    branches: ["main", "staging"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions for the workflow
permissions:
  contents: read

# Allow only one concurrent build, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "python-build"
  cancel-in-progress: false

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          # Install flake8 if not in requirements.txt
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Test with pytest
        run: |
          # Install pytest if not in requirements.txt
          pip install pytest
          # Run tests
          pytest src/tests/ -v
          
      - name: Test Python worker compilation
        run: |
          echo "Testing Python worker compilation..."
          python -m py_compile src/cloudflare_worker.py
          echo "‚úÖ Python worker compiles successfully!"
          
      - name: Test Python imports
        run: |
          echo "Testing Python imports..."
          python -c "import requests, bs4, lxml; print('‚úÖ All required packages imported successfully')"
          
      - name: Check code formatting
        run: |
          # Install black if not in requirements.txt
          pip install black
          # Check if code is properly formatted
          black --check --diff src/
          
      - name: Security audit
        run: |
          # Install safety if not in requirements.txt
          pip install safety
          # Check for known security vulnerabilities
          safety check
          
      - name: Build summary
        run: |
          echo "üéâ Python build and test completed successfully!"
          echo "üìä Python version: ${{ matrix.python-version }}"
          echo "üìÅ Source directory: src/"
          echo "üß™ Tests: src/tests/"
          echo "üï∑Ô∏è  Worker: src/cloudflare_worker.py"
