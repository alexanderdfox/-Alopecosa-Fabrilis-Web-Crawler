# Python-friendly workflow for building and testing Python projects
name: Python Build and Test

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main", "staging"]
  
  # Runs on pull requests
  pull_request:
    branches: ["main", "staging"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions for the workflow
permissions:
  contents: read

# Allow only one concurrent build, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "python-build"
  cancel-in-progress: false

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          # Install flake8 if not in requirements.txt
          pip install flake8
          
          echo "üîç Linting with flake8 configuration..."
          # Use the .flake8 configuration file for consistent linting
          flake8 .
          
          echo "‚úÖ Linting completed!"
          
      - name: Test with pytest
        run: |
          # Install pytest if not in requirements.txt
          pip install pytest
          # Run tests
          pytest src/tests/ -v
          
      - name: Test Python worker compilation
        run: |
          echo "Testing Python worker compilation..."
          python -m py_compile src/cloudflare_worker.py
          echo "‚úÖ Python worker compiles successfully!"
          
      - name: Test Python imports
        run: |
          echo "Testing Python imports..."
          python -c "import requests, bs4, lxml; print('‚úÖ All required packages imported successfully')"
          
      - name: Test example files
        run: |
          echo "Testing example files..."
          
          # Test that examples can be imported (but not run)
          echo "üîç Testing example imports..."
          python -c "
          try:
              from src.examples.example_batch_scraping import example_batch_scraping
              from src.examples.example_usage import example_usage
              from src.examples.demo_crawler import demo_crawler
              print('‚úÖ All example files imported successfully')
          except ImportError as e:
              print(f'‚ö†Ô∏è  Some examples could not be imported: {e}')
          except Exception as e:
              print(f'‚ö†Ô∏è  Unexpected error importing examples: {e}')
          "
          
          echo "‚úÖ Example file testing completed!"
          
      - name: Check code formatting
        run: |
          # Install black if not in requirements.txt
          pip install black
          # Check if code is properly formatted (excluding examples)
          black --check --diff src/ --exclude="src/examples/"
          
      - name: Security audit
        run: |
          # Install safety if not in requirements.txt
          pip install safety
          # Check for known security vulnerabilities
          safety check
          
      - name: Build summary
        run: |
          echo "üéâ Python build and test completed successfully!"
          echo "üìä Python version: ${{ matrix.python-version }}"
          echo "üìÅ Source directory: src/"
          echo "üß™ Tests: src/tests/"
          echo "üï∑Ô∏è  Worker: src/cloudflare_worker.py"
